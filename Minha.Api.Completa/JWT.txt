Criar uma classe dentro de extensions 
-> AppSettings

Editar o arquvi appsettings
->
"AppSettings": {
    "Secret": "MEUSEGREDOSUPERSECRETO",
    "ExpiracaoHoras": 2,
    "Emissor": "MeuSistema",
    "ValidoEm": "https://localhost"
  }
 Editar a  configuracao do identity 
-> 
  IdentityConfig
  //Jwt
            var appSettingsSection = configuration.GetSection("AppSettings");
            services.Configure<AppSettings>(appSettingsSection);

            var appSettings = appSettingsSection.Get<AppSettings>();
            var Key = Encoding.ASCII.GetBytes(appSettings.Secret);

            services.AddAuthentication(x =>
            {
                x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(x =>
            {
                x.RequireHttpsMetadata = false; // true usa HTTPS SOMENTE
                x.SaveToken = true;
                x.TokenValidationParameters = new TokenValidationParameters{

                    ValidateIssuerSigningKey = true,
                    IssuerSigningKey = new SymmetricSecurityKey(Key),
                    ValidateIssuer = true,
                    ValidateAudience = true,
                    ValidAudience = appSettings.ValidoEm,
                    ValidIssuer = appSettings.Emissor
                };
            });
Alterar AuthController
->

 private string GerarJwt()
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var Key = Encoding.ASCII.GetBytes(_appSettings.Secret);
            var token = tokenHandler.CreateToken(new SecurityTokenDescriptor
            {
                Issuer = _appSettings.Emissor,
                Audience = _appSettings.ValidoEm,
                Expires = DateTime.UtcNow.AddHours(_appSettings.ExpiracaoHoras),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(Key), SecurityAlgorithms.HmacSha256Signature)

            });
            var encodedToken = tokenHandler.WriteToken(token);

            return encodedToken;
        }

Testando
->
POST 
https://localhost:5001/api/entrar
Modelo
{
        "Email": "teste@teste.com",
        "Password": "Teste@123",
        "ConfirmPassWord": "Teste@123"
        
}

RETURN
{
    "success": true,
    "data": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2Mjg2NTQ0MzIsImV4cCI6MTYyODY2MTYzMiwiaWF0IjoxNjI4NjU0NDMyLCJpc3MiOiJNZXVTaXN0ZW1hIiwiYXVkIjoiaHR0cHM6Ly9sb2NhbGhvc3QifQ.EgB60Oi9e6SyVxTFhm-uIXTuZIz4_SEJBhjbVCIIx28"
}
